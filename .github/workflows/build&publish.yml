name: Build and Deploy to ECS

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '*.yaml'
      - '*.yml'
      - '.github/workflows/cloudformation.yml'
      - 'README.md'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      ECR_REPOSITORY_URI : public.ecr.aws/i3g8s7k5/giftedlabs/tasksphere

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Configure AWS Credentials (Public ECR is in us-east-1, but your app is in eu-central-1)
      - name: Configure AWS Credentials for ECR Public
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      # Login to Amazon ECR Public
      - name: Login to Amazon ECR Public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public


      # Build and push the image to ECR
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }} .
          docker tag ${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }} ${{ env.ECR_REPOSITORY_URI }}:latest
          docker push ${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }}
          docker push ${{ env.ECR_REPOSITORY_URI }}:latest
          echo "image_uri=${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }}" >> $GITHUB_ENV
          echo "Set image_uri to: ${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }}"

  deploy-to-ecs:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Configure AWS Credentials for deployment (eu-central-1)
      - name: Configure AWS Credentials for Deployment
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: eu-central-1


      - name: Create AppSpec and TaskDef files
        env:
          IMAGE_URI: ${{needs.build-and-push.outputs.image_uri}}

        run: |
          # Debug - confirm we have the image
          echo "Using image: $IMAGE_URI"
          
          # Get task definition values
          TASK_DEF_ARN=$(aws ecs describe-task-definition --region eu-central-1 --task-definition tasksphere --query "taskDefinition.taskDefinitionArn" --output text)
          TASK_DEF_FAMILY=$(echo $TASK_DEF_ARN | cut -d'/' -f2 | cut -d':' -f1)

          # Create task definition JSON
          aws ecs describe-task-definition --task-definition $TASK_DEF_FAMILY --region eu-central-1 --query "taskDefinition" > task-definition.json

          # Update the image in the task definition
          jq --arg IMAGE "$IMAGE_URI" '.containerDefinitions[0].image = $IMAGE' task-definition.json > updated-task-def.json
          mv updated-task-def.json task-definition.json

          # Remove fields that are not allowed during registration
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' task-definition.json > filtered-task-definition.json

          # Register new task definition using the filtered JSON
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --region eu-central-1 --cli-input-json file://filtered-task-definition.json --query "taskDefinition.taskDefinitionArn" --output text)
          echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV
          echo "Registered new task definition: $NEW_TASK_DEF_ARN"

          # Update the existing appspec.yaml file in the repository root
          sed -i "s|<TASK_DEFINITION>|$NEW_TASK_DEF_ARN|g" appspec.yaml
          echo "Updated appspec.yaml:"
          cat appspec.yaml

      - name: Package deployment
        run: |
          # Package the existing appspec.yaml from the repository root into a ZIP file
          zip -r deployment.zip appspec.yaml
          aws s3 cp deployment.zip s3://deployment-bucket-gifts/deployment.zip      

      - name: Deploy to AWS CodeDeploy
        run: |
          # Get deployment details filtering for TaskSphere-specific resources
          CLUSTER_NAME=$(aws cloudformation describe-stacks --region eu-central-1 --stack-name TaskSphere-ECSS --query "Stacks[0].Outputs[?OutputKey=='ECSCluster' && contains(OutputValue, 'TaskSphere')].OutputValue" --output text)
          SERVICE_NAME=$(aws cloudformation describe-stacks --region eu-central-1 --stack-name TaskSphere-ECSS --query "Stacks[0].Outputs[?OutputKey=='ECSService' && contains(OutputValue, 'TaskSphere')].OutputValue" --output text)
          CODEDEPLOY_APP=$(aws cloudformation describe-stacks --region eu-central-1 --stack-name TaskSphere-ECSS --query "Stacks[0].Outputs[?OutputKey=='CodeDeployApplication' && contains(OutputValue, 'TaskSphere')].OutputValue" --output text)
          CODEDEPLOY_GROUP=$(aws cloudformation describe-stacks --region eu-central-1 --stack-name TaskSphere-ECSS --query "Stacks[0].Outputs[?OutputKey=='CodeDeployDeploymentGroup' && contains(OutputValue, 'TaskSphere')].OutputValue" --output text)

          echo "Using TaskSphere-specific resources:"
          echo "Cluster: $CLUSTER_NAME"
          echo "Service: $SERVICE_NAME"
          echo "CodeDeploy App: $CODEDEPLOY_APP"
          echo "CodeDeploy Group: $CODEDEPLOY_GROUP"

          # Create deployment
          aws deploy create-deployment \
            --region eu-central-1  \
            --application-name $CODEDEPLOY_APP \
            --deployment-group-name $CODEDEPLOY_GROUP \
            --s3-location bucket=deployment-bucket-gifts,key=deployment.zip,bundleType=zip \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
            --description "Deployment from GitHub Actions for TaskSphere"